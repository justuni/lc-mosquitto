library community.livecode.trevordevore.mosquitto

  use com.livecode.engine
  use com.livecode.foreign

  metadata title is "Mosquitto"
  metadata author is "Trevor DeVore"
  metadata version is "0.0.1"

  public type Mosquitto is Pointer // to struct
  public foreign type MosquittoMessage binds to "MCAggregateTypeInfo:ErrEEa"

  foreign handler MCStringCreateWithCString(in pString as Pointer, out rString as String) returns CBool binds to "<builtin>"
  foreign handler MCDataCreateWithBytes(in pBytes as Pointer, in pByteCount as LCUInt, out rData as Data) returns CBool binds to "<builtin>"

  foreign handler mosquitto_lib_version (inout pMajor as CInt, inout pMinor as CInt, inout pRevision as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_lib_version"

  foreign handler mosquitto_lib_init () \
        returns nothing binds to "c:libmosquitto>mosquitto_lib_init"

  foreign handler mosquitto_lib_cleanup () \
        returns nothing binds to "c:libmosquitto>mosquitto_lib_cleanup"

  foreign handler mosquitto_new (in pClientId as optional ZStringNative, in pCleanSession as CBool, in pUserData as optional Pointer) \
        returns Mosquitto \
        binds to "c:libmosquitto>mosquitto_new"

  foreign handler mosquitto_destroy (in pMosquitto as Mosquitto) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_destroy"

  foreign handler mosquitto_reinitialise (in pMosquitto as Mosquitto, in pId as optional ZStringNative, in pCleanSession as CBool, in pUserData as optional Pointer) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_reinitialise"

  foreign handler mosquitto_publish (in pMosquitto as Mosquitto, inout rMessageId as optional CInt, in pTopic as ZStringNative, \
        in pPayloadLength as CInt, in pPayload as optional Pointer, in pQoS as CInt, in pRetain as CBool) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_publish"

  foreign handler mosquitto_subscribe (in pMosquitto as Mosquitto, inout rMessageId as CInt, in pSubPattern as ZStringNative, in pQoS as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_subscribe"

  foreign handler mosquitto_unsubscribe (in pMosquitto as Mosquitto, inout rMessageId as CInt, in pUnsubPattern as ZStringNative) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_unsubscribe"

  foreign handler mosquitto_message_copy (in pDestinationMessage as MosquittoMessage, in pSourceMessage as MosquittoMessage) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_message_copy"

  foreign handler mosquitto_message_free (in pMessage as Pointer) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_message_free"


  // Connect/disconnect
  foreign handler mosquitto_connect (in pMosquitto as Mosquitto, in pHost as ZStringNative, in pPort as CInt, in pKeepAlive as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_connect"

  foreign handler mosquitto_disconnect (in pMosquitto as Mosquitto) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_disconnect"

  // Run loop
  foreign handler MCHandlerGetFunctionPtr(in pHandler as any, out rFuncPtr as Pointer) returns CBool binds to "<builtin>"

  // Callbacks
  public foreign handler type mosquitto_connect_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pReturnCode as CInt) returns nothing
  public foreign handler type mosquitto_disconnect_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pReasonCode as CInt) returns nothing
  public foreign handler type mosquitto_publish_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt) returns nothing
  public foreign handler type mosquitto_message_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessage as Pointer) returns nothing
  public foreign handler type mosquitto_subscribe_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt, in pQoSCount as CInt, in pGrantedQoSArray as optional Pointer) returns nothing
  public foreign handler type mosquitto_unsubscribe_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt) returns nothing
  public foreign handler type mosquitto_log_callback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pLevel as CInt, in pString as optional ZStringNative) returns nothing

  foreign handler mosquitto_connect_callback_set (in pMosquitto as Mosquitto, in pHandler as mosquitto_connect_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_connect_callback_set"

  foreign handler mosquitto_disconnect_callback_set (in pMosquitto as Mosquitto, in pHandler as mosquitto_disconnect_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_disconnect_callback_set"

  foreign handler mosquitto_publish_callback_set (in pMosquitto as Mosquitto, in pHandler as mosquitto_publish_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_publish_callback_set"

  foreign handler mosquitto_message_callback_set (in pMosquitto as Mosquitto, in pHandler as mosquitto_message_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_message_callback_set"

  foreign handler mosquitto_subscribe_callback_set (in pMosquitto as Mosquitto, in pHandler as mosquitto_subscribe_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_subscribe_callback_set"

  foreign handler mosquitto_unsubscribe_callback_set (in pMosquitto as Mosquitto, in pHandler as mosquitto_unsubscribe_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_unsubscribe_callback_set"

  foreign handler mosquitto_log_callback_set (in pMosquitto as Mosquitto, in pHandler as mosquitto_log_callback) \
        returns nothing \
        binds to "c:libmosquitto>mosquitto_log_callback_set"

  // Netowrk loop
  foreign handler mosquitto_loop (in pMosquitto as Mosquitto, in pTimeout as CInt, in pMaxPackets as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_loop"

  foreign handler mosquitto_loop_forever (in pMosquitto as Mosquitto, in pTimeout as CInt, in pMaxPackets as CInt) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_loop_forever"

  foreign handler mosquitto_loop_start (in pMosquitto as Mosquitto) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_loop_start"

  foreign handler mosquitto_loop_stop (in pMosquitto as Mosquitto, in pForce as CBool) \
        returns CInt \
        binds to "c:libmosquitto>mosquitto_loop_stop"

  private variable mRunloopAction as MCRunloopActionRef
  private variable mMosquitto as optional Mosquitto
  private variable mUseThreads as Boolean


  public handler MosquittoVersion() returns String
    variable tMajor as Integer
    variable tMinor as Integer
    variable tRevision as Integer
    variable tResult as Integer

    unsafe
      put mosquitto_lib_version(tMajor, tMinor, tRevision) into tResult
    end unsafe

    return tMajor formatted as string & "." & tMinor formatted as string & "." & tRevision formatted as string
  end handler


  /**
  Summary: Handler for testing during development

  Returns: nothing
  */
  public handler MosquittoInitialize(in pClientName as String, in pUseThreads as Boolean) returns nothing
    put pUseThreads into mUseThreads

    unsafe
      mosquitto_lib_init()

      put mosquitto_new(pClientName, true, nothing) into mMosquitto

      if mMosquitto is not nothing then
        mosquitto_log_callback_set(mMosquitto, LogCallback)
        mosquitto_connect_callback_set(mMosquitto, ConnectCallback)
        mosquitto_publish_callback_set(mMosquitto, PublishCallback)
        -- mosquitto_message_callback_set(mMosquitto, MessageCallback)
        mosquitto_subscribe_callback_set(mMosquitto, SubscribeCallback)
        mosquitto_unsubscribe_callback_set(mMosquitto, UnsubscribeCallback)

        if mUseThreads then
          mosquitto_loop_start(mMosquitto)
          log "using threads"
        else
          variable tDoRunLoopFunc as MCRunloopActionCallback
          variable tContext as optional Pointer
          if MCHandlerGetFunctionPtr(doRunLoop, tDoRunLoopFunc) then
            MCEngineAddRunloopAction(tDoRunLoopFunc, tContext, mRunloopAction)
          else
            log "Unable to set run loop"
          end if
        end if
      end if
    end unsafe
  end handler


  public handler MosquittoCleanup() returns nothing
    unsafe
      if mMosquitto is not nothing then
        if mUseThreads then
          mosquitto_loop_stop(mMosquitto, true)
        else
          MCEngineRemoveRunloopAction(mRunloopAction)
        end if
        mosquitto_destroy(mMosquitto)
        put nothing into mMosquitto
      end if
      mosquitto_lib_cleanup()
    end unsafe
  end handler


  public handler MosquittoConnect(in pHost as String, in pPort as Integer, in pKeepAlive as Integer) returns String
    variable tResult as Integer

    unsafe
      put mosquitto_connect (mMosquitto, pHost, pPort, pKeepAlive) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoDisconnect() returns String
    variable tResult as Integer

    unsafe
      put mosquitto_disconnect(mMosquitto) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoPublish(in pTopic as String, in pQualityOfService as Integer) returns String
    variable messageId as Integer
    variable tResult as Integer

    -- 0: The broker/client will deliver the message once, with no confirmation.
    -- 1: The broker/client will deliver the message at least once, with confirmation required.
    -- 2: The broker/client will deliver the message exactly once by using a four step handshake.
    unsafe
      put mosquitto_publish (mMosquitto, messageId, pTopic, 0, nothing, pQualityOfService, false) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoSubscribe(in pTopic as String, in pQualityOfService as Integer) returns String
    variable messageId as Integer
    variable tResult as Integer

    unsafe
      put mosquitto_subscribe (mMosquitto, messageId, pTopic, pQualityOfService) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  public handler MosquittoUnsubscribe(in pTopic as String) returns String
    variable messageId as Integer
    variable tResult as Integer

    unsafe
      put mosquitto_unsubscribe (mMosquitto, messageId, pTopic) into tResult
    end unsafe
    return resolveErrorMessage(tResult)
  end handler


  private handler doRunLoop(in pContext as optional Pointer) returns nothing
    unsafe
      mosquitto_loop(mMosquitto, -1, 1)
    end unsafe
  end handler


  private handler ConnectCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pResult as CInt) returns nothing
    log ["ConnectCallback", pResult]
  end handler


  private handler PublishCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt) returns nothing
    log ["PublishCallback", pMessageId]
  end handler


  private handler MessageCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessage as MosquittoMessage) returns nothing
    -- struct mosquitto_message{
    --   int mid;
    --   char *topic;
    --   void *payload;
    --   int payloadlen;
    --   int qos;
    --   bool retain;
    -- };
    variable tData as Data
    variable tTopic as String
    variable tMessage as MosquittoMessage
    variable tResult as Integer

    log pMessage

    -- unsafe
    --   put mosquitto_message_copy (tMessage, pMessage) into tResult
    --   log "copy message:" && resolveErrorMessage(tResult)
    -- end unsafe

    -- unsafe
    --   if tResult is 0 then
    --   put mosquitto_message_free (tMessage) into tResult
    --   log "free message:" && resolveErrorMessage(tResult)
    --   end if
    -- end unsafe

    -- log pMessage

    -- if element 2 of pMessage is not nothing then
    --   log "what"
    --   -- unsafe
    --   --   if not MCStringCreateWithCString(element 2 of pMessage, tTopic) then
    --   --     log "failed to convert const char * to String"
    --   --   end if
    --   -- end unsafe
    -- end if
    -- if element 3 of pMessage is not nothing then
    --   unsafe
    --     if not MCDataCreateWithBytes(element 3 of pMessage, element 4 of pMessage, tData) then
    --       log "unable to create data"
    --     else
    --       log tData
    --     end if
    --   end unsafe
    -- end if

    log ["MessageCallback"]
  end handler


  private handler SubscribeCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt, in pQoSCount as CInt, in pGrantedQoSArray as optional Pointer) returns nothing
    log ["SubscribeCallback", pMessageId]
  end handler


  private handler UnsubscribeCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pMessageId as CInt) returns nothing
    log ["UnsubscribeCallback", pMessageId]
  end handler


  /* in pMosquitto as Pointer, in pUserData as optional Pointer, in pLevel as CInt, in pString as ZStringNative */
  private handler LogCallback(in pMosquitto as Pointer, in pUserData as optional Pointer, in pLevel as CInt, in pString as optional ZStringNative) returns nothing
    log["LogCallback", pLevel, pString]
  end handler


  private handler resolveErrorMessage(in pErrNumber as Integer) returns String
    if pErrNumber is 0 then
      return ""
    else if pErrNumber is 1 then
      return "out of memory"
    else if pErrNumber is 2 then
      return "protocol error communicating with the broker"
    else if pErrNumber is 3 then
      return "the input parameters were invalid"
    else if pErrNumber is 4 then
      return "the client isn't connected to the broker"
    else if pErrNumber is 9 then
      return "payload length is too large"
    else if pErrNumber is 10 then
      return "thread support is not enabled"
    else if pErrNumber is 14 then
      // System call returned error.
      return the system error message
    else if pErrNumber is 18 then
      return "topic contains invalid UTF-8"
    end if
  end handler
end library
